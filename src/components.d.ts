/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface SlButton {
    /**
    * Set to true to draw a full-width button.
    */
    'block': boolean;
    /**
    * Set to true to draw a circle button.
    */
    'circle': boolean;
    /**
    * Set to true to disable the button.
    */
    'disabled': boolean;
    /**
    * Set to true to draw the button in a loading state.
    */
    'loading': boolean;
    /**
    * Set to true to draw an outlined button.
    */
    'outline': boolean;
    /**
    * Removes focus from the button.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Set to true to draw a rounded button.
    */
    'round': boolean;
    /**
    * Sets focus on the button.
    */
    'setFocus': () => Promise<void>;
    /**
    * The button's size, one of `small`, `medium`, or `large`.
    */
    'size': string;
    /**
    * The button's type, one of `default`, `primary`, `success`, `info`, `warning`, `danger`, or `text`.
    */
    'type': string;
  }
  interface SlCheckbox {
    /**
    * Set to true to draw the checkbox in a checked state.
    */
    'checked': boolean;
    /**
    * Set to true to disable the checkbox.
    */
    'disabled': boolean;
    /**
    * Set to true to draw the checkbox in an indeterminate state.
    */
    'indeterminate': boolean;
    /**
    * A native input's name attribute.
    */
    'name': string;
    /**
    * Removes focus from the checkbox.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Sets focus on the checkbox.
    */
    'setFocus': () => Promise<void>;
    /**
    * The native input's value attribute.
    */
    'value': string;
  }
  interface SlDropdown {
    'close': () => Promise<void>;
    'open': () => Promise<void>;
    /**
    * The preferred placement of the dropdown menu. Note that the actual placement may vary as needed to keep the menu inside of the viewport.
    */
    'placement': 'bottom-start' | 'bottom-end' | 'top-start' | 'top-end';
  }
  interface SlDropdownDivider {}
  interface SlDropdownItem {
    /**
    * Set to true to draw the dropdown item in an active state.
    */
    'active': boolean;
    /**
    * Set to true to draw the item in a checked state.
    */
    'checked': boolean;
    /**
    * Set to true to draw the dropdown item in a disabled state.
    */
    'disabled': boolean;
  }
  interface SlInput {
    /**
    * The input's autocaptialize attribute.
    */
    'autocapitalize': string;
    /**
    * The input's autocomplete attribute.
    */
    'autocomplete': string;
    /**
    * The input's autocorrect attribute.
    */
    'autocorrect': string;
    /**
    * The input's autofocus attribute.
    */
    'autofocus': boolean;
    /**
    * Set to true to add a clear button when the input is populated.
    */
    'clearable': boolean;
    /**
    * Set to true to disable the input.
    */
    'disabled': boolean;
    /**
    * The input's inputmode attribute.
    */
    'inputmode': string;
    /**
    * The input's max attribute.
    */
    'max': number;
    /**
    * The input's maxlength attribute.
    */
    'maxlength': number;
    /**
    * The input's min attribute.
    */
    'min': number;
    /**
    * The input's minlength attribute.
    */
    'minlength': number;
    /**
    * The input's name attribute.
    */
    'name': string;
    /**
    * The input's placeholder text.
    */
    'placeholder': string;
    /**
    * Set to true for a readonly input.
    */
    'readonly': boolean;
    /**
    * Removes focus from the input.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Sets focus on the input.
    */
    'setFocus': () => Promise<void>;
    /**
    * The input's size, one of `small`, `medium`, or `large`.
    */
    'size': string;
    /**
    * The input's step attribute.
    */
    'step': number;
    /**
    * The input's type, one of `text`, `number`, `email`, etc.
    */
    'type': string;
    /**
    * The input's value attribute.
    */
    'value': string;
  }
  interface SlRadio {
    /**
    * Set to true to draw the radio in a checked state.
    */
    'checked': boolean;
    /**
    * Set to true to disable the radio.
    */
    'disabled': boolean;
    /**
    * A native input's name attribute.
    */
    'name': string;
    /**
    * Removes focus from the radio.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Sets focus on the radio.
    */
    'setFocus': () => Promise<void>;
    /**
    * The native input's value attribute.
    */
    'value': string;
  }
  interface SlRange {
    /**
    * Set to true to disable the input.
    */
    'disabled': boolean;
    /**
    * The input's max attribute.
    */
    'max': number;
    /**
    * The input's min attribute.
    */
    'min': number;
    /**
    * The input's name attribute.
    */
    'name': string;
    /**
    * Removes focus from the input.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Sets focus on the input.
    */
    'setFocus': () => Promise<void>;
    /**
    * The input's step attribute.
    */
    'step': number | 'any';
    /**
    * The input's value attribute.
    */
    'value': string;
  }
  interface SlSpinner {
    /**
    * The spinner's size.
    */
    'size': string;
  }
  interface SlTextarea {
    /**
    * The textarea's autocaptialize attribute.
    */
    'autocapitalize': string;
    /**
    * The textarea's autocomplete attribute.
    */
    'autocomplete': string;
    /**
    * The textarea's autocorrect attribute.
    */
    'autocorrect': string;
    /**
    * The textarea's autofocus attribute.
    */
    'autofocus': boolean;
    /**
    * Set to true to disable the textarea.
    */
    'disabled': boolean;
    /**
    * The textarea's inputmode attribute.
    */
    'inputmode': string;
    /**
    * The textarea's name attribute.
    */
    'name': string;
    /**
    * The textarea's placeholder text.
    */
    'placeholder': string;
    /**
    * Set to true for a readonly textarea.
    */
    'readonly': boolean;
    /**
    * Removes focus fromt the textarea.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Controls how the textarea can be resized.
    */
    'resize': 'none' | 'vertical' | 'auto';
    /**
    * The number of rows to display by default.
    */
    'rows': number;
    /**
    * Sets focus on the textarea.
    */
    'setFocus': () => Promise<void>;
    /**
    * The textarea's size, one of `small`, `medium`, or `large`.
    */
    'size': string;
    /**
    * The textarea's value attribute.
    */
    'value': string;
  }
}

declare global {


  interface HTMLSlButtonElement extends Components.SlButton, HTMLStencilElement {}
  var HTMLSlButtonElement: {
    prototype: HTMLSlButtonElement;
    new (): HTMLSlButtonElement;
  };

  interface HTMLSlCheckboxElement extends Components.SlCheckbox, HTMLStencilElement {}
  var HTMLSlCheckboxElement: {
    prototype: HTMLSlCheckboxElement;
    new (): HTMLSlCheckboxElement;
  };

  interface HTMLSlDropdownElement extends Components.SlDropdown, HTMLStencilElement {}
  var HTMLSlDropdownElement: {
    prototype: HTMLSlDropdownElement;
    new (): HTMLSlDropdownElement;
  };

  interface HTMLSlDropdownDividerElement extends Components.SlDropdownDivider, HTMLStencilElement {}
  var HTMLSlDropdownDividerElement: {
    prototype: HTMLSlDropdownDividerElement;
    new (): HTMLSlDropdownDividerElement;
  };

  interface HTMLSlDropdownItemElement extends Components.SlDropdownItem, HTMLStencilElement {}
  var HTMLSlDropdownItemElement: {
    prototype: HTMLSlDropdownItemElement;
    new (): HTMLSlDropdownItemElement;
  };

  interface HTMLSlInputElement extends Components.SlInput, HTMLStencilElement {}
  var HTMLSlInputElement: {
    prototype: HTMLSlInputElement;
    new (): HTMLSlInputElement;
  };

  interface HTMLSlRadioElement extends Components.SlRadio, HTMLStencilElement {}
  var HTMLSlRadioElement: {
    prototype: HTMLSlRadioElement;
    new (): HTMLSlRadioElement;
  };

  interface HTMLSlRangeElement extends Components.SlRange, HTMLStencilElement {}
  var HTMLSlRangeElement: {
    prototype: HTMLSlRangeElement;
    new (): HTMLSlRangeElement;
  };

  interface HTMLSlSpinnerElement extends Components.SlSpinner, HTMLStencilElement {}
  var HTMLSlSpinnerElement: {
    prototype: HTMLSlSpinnerElement;
    new (): HTMLSlSpinnerElement;
  };

  interface HTMLSlTextareaElement extends Components.SlTextarea, HTMLStencilElement {}
  var HTMLSlTextareaElement: {
    prototype: HTMLSlTextareaElement;
    new (): HTMLSlTextareaElement;
  };
  interface HTMLElementTagNameMap {
    'sl-button': HTMLSlButtonElement;
    'sl-checkbox': HTMLSlCheckboxElement;
    'sl-dropdown': HTMLSlDropdownElement;
    'sl-dropdown-divider': HTMLSlDropdownDividerElement;
    'sl-dropdown-item': HTMLSlDropdownItemElement;
    'sl-input': HTMLSlInputElement;
    'sl-radio': HTMLSlRadioElement;
    'sl-range': HTMLSlRangeElement;
    'sl-spinner': HTMLSlSpinnerElement;
    'sl-textarea': HTMLSlTextareaElement;
  }
}

declare namespace LocalJSX {
  interface SlButton {
    /**
    * Set to true to draw a full-width button.
    */
    'block'?: boolean;
    /**
    * Set to true to draw a circle button.
    */
    'circle'?: boolean;
    /**
    * Set to true to disable the button.
    */
    'disabled'?: boolean;
    /**
    * Set to true to draw the button in a loading state.
    */
    'loading'?: boolean;
    /**
    * Set to true to draw an outlined button.
    */
    'outline'?: boolean;
    /**
    * Set to true to draw a rounded button.
    */
    'round'?: boolean;
    /**
    * The button's size, one of `small`, `medium`, or `large`.
    */
    'size'?: string;
    /**
    * The button's type, one of `default`, `primary`, `success`, `info`, `warning`, `danger`, or `text`.
    */
    'type'?: string;
  }
  interface SlCheckbox {
    /**
    * Set to true to draw the checkbox in a checked state.
    */
    'checked'?: boolean;
    /**
    * Set to true to disable the checkbox.
    */
    'disabled'?: boolean;
    /**
    * Set to true to draw the checkbox in an indeterminate state.
    */
    'indeterminate'?: boolean;
    /**
    * A native input's name attribute.
    */
    'name'?: string;
    /**
    * The native input's value attribute.
    */
    'value'?: string;
  }
  interface SlDropdown {
    /**
    * The preferred placement of the dropdown menu. Note that the actual placement may vary as needed to keep the menu inside of the viewport.
    */
    'placement'?: 'bottom-start' | 'bottom-end' | 'top-start' | 'top-end';
  }
  interface SlDropdownDivider {}
  interface SlDropdownItem {
    /**
    * Set to true to draw the dropdown item in an active state.
    */
    'active'?: boolean;
    /**
    * Set to true to draw the item in a checked state.
    */
    'checked'?: boolean;
    /**
    * Set to true to draw the dropdown item in a disabled state.
    */
    'disabled'?: boolean;
    'onShoelaceSelect'?: (event: CustomEvent<any>) => void;
  }
  interface SlInput {
    /**
    * The input's autocaptialize attribute.
    */
    'autocapitalize'?: string;
    /**
    * The input's autocomplete attribute.
    */
    'autocomplete'?: string;
    /**
    * The input's autocorrect attribute.
    */
    'autocorrect'?: string;
    /**
    * The input's autofocus attribute.
    */
    'autofocus'?: boolean;
    /**
    * Set to true to add a clear button when the input is populated.
    */
    'clearable'?: boolean;
    /**
    * Set to true to disable the input.
    */
    'disabled'?: boolean;
    /**
    * The input's inputmode attribute.
    */
    'inputmode'?: string;
    /**
    * The input's max attribute.
    */
    'max'?: number;
    /**
    * The input's maxlength attribute.
    */
    'maxlength'?: number;
    /**
    * The input's min attribute.
    */
    'min'?: number;
    /**
    * The input's minlength attribute.
    */
    'minlength'?: number;
    /**
    * The input's name attribute.
    */
    'name'?: string;
    /**
    * The input's placeholder text.
    */
    'placeholder'?: string;
    /**
    * Set to true for a readonly input.
    */
    'readonly'?: boolean;
    /**
    * The input's size, one of `small`, `medium`, or `large`.
    */
    'size'?: string;
    /**
    * The input's step attribute.
    */
    'step'?: number;
    /**
    * The input's type, one of `text`, `number`, `email`, etc.
    */
    'type'?: string;
    /**
    * The input's value attribute.
    */
    'value'?: string;
  }
  interface SlRadio {
    /**
    * Set to true to draw the radio in a checked state.
    */
    'checked'?: boolean;
    /**
    * Set to true to disable the radio.
    */
    'disabled'?: boolean;
    /**
    * A native input's name attribute.
    */
    'name'?: string;
    /**
    * The native input's value attribute.
    */
    'value'?: string;
  }
  interface SlRange {
    /**
    * Set to true to disable the input.
    */
    'disabled'?: boolean;
    /**
    * The input's max attribute.
    */
    'max'?: number;
    /**
    * The input's min attribute.
    */
    'min'?: number;
    /**
    * The input's name attribute.
    */
    'name'?: string;
    /**
    * The input's step attribute.
    */
    'step'?: number | 'any';
    /**
    * The input's value attribute.
    */
    'value'?: string;
  }
  interface SlSpinner {
    /**
    * The spinner's size.
    */
    'size'?: string;
  }
  interface SlTextarea {
    /**
    * The textarea's autocaptialize attribute.
    */
    'autocapitalize'?: string;
    /**
    * The textarea's autocomplete attribute.
    */
    'autocomplete'?: string;
    /**
    * The textarea's autocorrect attribute.
    */
    'autocorrect'?: string;
    /**
    * The textarea's autofocus attribute.
    */
    'autofocus'?: boolean;
    /**
    * Set to true to disable the textarea.
    */
    'disabled'?: boolean;
    /**
    * The textarea's inputmode attribute.
    */
    'inputmode'?: string;
    /**
    * The textarea's name attribute.
    */
    'name'?: string;
    /**
    * The textarea's placeholder text.
    */
    'placeholder'?: string;
    /**
    * Set to true for a readonly textarea.
    */
    'readonly'?: boolean;
    /**
    * Controls how the textarea can be resized.
    */
    'resize'?: 'none' | 'vertical' | 'auto';
    /**
    * The number of rows to display by default.
    */
    'rows'?: number;
    /**
    * The textarea's size, one of `small`, `medium`, or `large`.
    */
    'size'?: string;
    /**
    * The textarea's value attribute.
    */
    'value'?: string;
  }

  interface IntrinsicElements {
    'sl-button': SlButton;
    'sl-checkbox': SlCheckbox;
    'sl-dropdown': SlDropdown;
    'sl-dropdown-divider': SlDropdownDivider;
    'sl-dropdown-item': SlDropdownItem;
    'sl-input': SlInput;
    'sl-radio': SlRadio;
    'sl-range': SlRange;
    'sl-spinner': SlSpinner;
    'sl-textarea': SlTextarea;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'sl-button': LocalJSX.SlButton & JSXBase.HTMLAttributes<HTMLSlButtonElement>;
      'sl-checkbox': LocalJSX.SlCheckbox & JSXBase.HTMLAttributes<HTMLSlCheckboxElement>;
      'sl-dropdown': LocalJSX.SlDropdown & JSXBase.HTMLAttributes<HTMLSlDropdownElement>;
      'sl-dropdown-divider': LocalJSX.SlDropdownDivider & JSXBase.HTMLAttributes<HTMLSlDropdownDividerElement>;
      'sl-dropdown-item': LocalJSX.SlDropdownItem & JSXBase.HTMLAttributes<HTMLSlDropdownItemElement>;
      'sl-input': LocalJSX.SlInput & JSXBase.HTMLAttributes<HTMLSlInputElement>;
      'sl-radio': LocalJSX.SlRadio & JSXBase.HTMLAttributes<HTMLSlRadioElement>;
      'sl-range': LocalJSX.SlRange & JSXBase.HTMLAttributes<HTMLSlRangeElement>;
      'sl-spinner': LocalJSX.SlSpinner & JSXBase.HTMLAttributes<HTMLSlSpinnerElement>;
      'sl-textarea': LocalJSX.SlTextarea & JSXBase.HTMLAttributes<HTMLSlTextareaElement>;
    }
  }
}


