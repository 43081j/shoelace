/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface SlButton {
    /**
    * Set to true to draw a full-width button.
    */
    'block': boolean;
    /**
    * Set to true to draw the button with a caret for use with dropdowns, popovers, etc. If this is enabled, the suffix slot will not be displayed.
    */
    'caret': boolean;
    /**
    * Set to true to draw a circle button.
    */
    'circle': boolean;
    /**
    * Set to true to disable the button.
    */
    'disabled': boolean;
    /**
    * Set to true to draw the button in a loading state.
    */
    'loading': boolean;
    /**
    * Set to true to draw an outlined button.
    */
    'outline': boolean;
    /**
    * Removes focus from the button.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Set to true to draw a rounded button.
    */
    'round': boolean;
    /**
    * Sets focus on the button.
    */
    'setFocus': () => Promise<void>;
    /**
    * The button's size, one of `small`, `medium`, or `large`.
    */
    'size': string;
    /**
    * The button's type, one of `default`, `primary`, `success`, `info`, `warning`, `danger`, or `text`.
    */
    'type': string;
  }
  interface SlDropdown {
    'close': () => Promise<void>;
    'open': () => Promise<void>;
    /**
    * The preferred placement of the dropdown menu. Note that the actual placement may vary as needed to keep the menu inside of the viewport.
    */
    'placement': 'bottom-start' | 'bottom-end' | 'top-start' | 'top-end';
  }
  interface SlDropdownDivider {}
  interface SlDropdownItem {
    /**
    * Set to true to draw the dropdown item in an active state.
    */
    'active': boolean;
    /**
    * Set to true to draw the item in a checked state.
    */
    'checked': boolean;
    /**
    * Set to true to draw the dropdown item in a disabled state.
    */
    'disabled': boolean;
  }
  interface SlSpinner {
    /**
    * The spinner's size.
    */
    'size': string;
  }
}

declare global {


  interface HTMLSlButtonElement extends Components.SlButton, HTMLStencilElement {}
  var HTMLSlButtonElement: {
    prototype: HTMLSlButtonElement;
    new (): HTMLSlButtonElement;
  };

  interface HTMLSlDropdownElement extends Components.SlDropdown, HTMLStencilElement {}
  var HTMLSlDropdownElement: {
    prototype: HTMLSlDropdownElement;
    new (): HTMLSlDropdownElement;
  };

  interface HTMLSlDropdownDividerElement extends Components.SlDropdownDivider, HTMLStencilElement {}
  var HTMLSlDropdownDividerElement: {
    prototype: HTMLSlDropdownDividerElement;
    new (): HTMLSlDropdownDividerElement;
  };

  interface HTMLSlDropdownItemElement extends Components.SlDropdownItem, HTMLStencilElement {}
  var HTMLSlDropdownItemElement: {
    prototype: HTMLSlDropdownItemElement;
    new (): HTMLSlDropdownItemElement;
  };

  interface HTMLSlSpinnerElement extends Components.SlSpinner, HTMLStencilElement {}
  var HTMLSlSpinnerElement: {
    prototype: HTMLSlSpinnerElement;
    new (): HTMLSlSpinnerElement;
  };
  interface HTMLElementTagNameMap {
    'sl-button': HTMLSlButtonElement;
    'sl-dropdown': HTMLSlDropdownElement;
    'sl-dropdown-divider': HTMLSlDropdownDividerElement;
    'sl-dropdown-item': HTMLSlDropdownItemElement;
    'sl-spinner': HTMLSlSpinnerElement;
  }
}

declare namespace LocalJSX {
  interface SlButton {
    /**
    * Set to true to draw a full-width button.
    */
    'block'?: boolean;
    /**
    * Set to true to draw the button with a caret for use with dropdowns, popovers, etc. If this is enabled, the suffix slot will not be displayed.
    */
    'caret'?: boolean;
    /**
    * Set to true to draw a circle button.
    */
    'circle'?: boolean;
    /**
    * Set to true to disable the button.
    */
    'disabled'?: boolean;
    /**
    * Set to true to draw the button in a loading state.
    */
    'loading'?: boolean;
    /**
    * Set to true to draw an outlined button.
    */
    'outline'?: boolean;
    /**
    * Set to true to draw a rounded button.
    */
    'round'?: boolean;
    /**
    * The button's size, one of `small`, `medium`, or `large`.
    */
    'size'?: string;
    /**
    * The button's type, one of `default`, `primary`, `success`, `info`, `warning`, `danger`, or `text`.
    */
    'type'?: string;
  }
  interface SlDropdown {
    /**
    * The preferred placement of the dropdown menu. Note that the actual placement may vary as needed to keep the menu inside of the viewport.
    */
    'placement'?: 'bottom-start' | 'bottom-end' | 'top-start' | 'top-end';
  }
  interface SlDropdownDivider {}
  interface SlDropdownItem {
    /**
    * Set to true to draw the dropdown item in an active state.
    */
    'active'?: boolean;
    /**
    * Set to true to draw the item in a checked state.
    */
    'checked'?: boolean;
    /**
    * Set to true to draw the dropdown item in a disabled state.
    */
    'disabled'?: boolean;
    'onShoelaceSelect'?: (event: CustomEvent<any>) => void;
  }
  interface SlSpinner {
    /**
    * The spinner's size.
    */
    'size'?: string;
  }

  interface IntrinsicElements {
    'sl-button': SlButton;
    'sl-dropdown': SlDropdown;
    'sl-dropdown-divider': SlDropdownDivider;
    'sl-dropdown-item': SlDropdownItem;
    'sl-spinner': SlSpinner;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'sl-button': LocalJSX.SlButton & JSXBase.HTMLAttributes<HTMLSlButtonElement>;
      'sl-dropdown': LocalJSX.SlDropdown & JSXBase.HTMLAttributes<HTMLSlDropdownElement>;
      'sl-dropdown-divider': LocalJSX.SlDropdownDivider & JSXBase.HTMLAttributes<HTMLSlDropdownDividerElement>;
      'sl-dropdown-item': LocalJSX.SlDropdownItem & JSXBase.HTMLAttributes<HTMLSlDropdownItemElement>;
      'sl-spinner': LocalJSX.SlSpinner & JSXBase.HTMLAttributes<HTMLSlSpinnerElement>;
    }
  }
}


