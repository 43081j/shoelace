/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface SButton {
    /**
    * Set to true to draw a full-width button.
    */
    'block': boolean;
    /**
    * Set to true to draw a circle button.
    */
    'circle': boolean;
    /**
    * Set to true to disable the button.
    */
    'disabled': boolean;
    /**
    * Set to true to draw the button in a loading state.
    */
    'loading': boolean;
    /**
    * Set to true to draw an outlined button.
    */
    'outline': boolean;
    /**
    * Removes focus from the button.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Set to true to draw a rounded button.
    */
    'round': boolean;
    /**
    * Sets focus on the button.
    */
    'setFocus': () => Promise<void>;
    /**
    * The button's size, one of `small`, `medium`, or `large`.
    */
    'size': string;
    /**
    * The button's type, one of `default`, `primary`, `success`, `info`, `warning`, `danger`, or `text`.
    */
    'type': string;
  }
  interface SDropdown {
    'close': () => Promise<void>;
    'open': () => Promise<void>;
    /**
    * The preferred placement of the dropdown menu. Note that the actual placement may vary as needed to keep the menu inside of the viewport.
    */
    'placement': 'bottom-start' | 'bottom-end' | 'top-start' | 'top-end';
  }
  interface SDropdownDivider {}
  interface SDropdownItem {
    /**
    * Set to true to draw the dropdown item in an active state.
    */
    'active': boolean;
    /**
    * Set to true to draw the item in a checked state.
    */
    'checked': boolean;
    /**
    * Set to true to draw the dropdown item in a disabled state.
    */
    'disabled': boolean;
  }
  interface SInput {
    /**
    * The input's autocaptialize attribute.
    */
    'autocapitalize': string;
    /**
    * The input's autocomplete attribute.
    */
    'autocomplete': string;
    /**
    * The input's autocorrect attribute.
    */
    'autocorrect': string;
    /**
    * The input's autofocus attribute.
    */
    'autofocus': boolean;
    /**
    * Set to true to add a clear button when the input is populated.
    */
    'clearable': boolean;
    /**
    * Set to true to disable the input.
    */
    'disabled': boolean;
    /**
    * The input's inputmode attribute.
    */
    'inputmode': string;
    /**
    * The input's max attribute.
    */
    'max': number;
    /**
    * The input's maxlength attribute.
    */
    'maxlength': number;
    /**
    * The input's min attribute.
    */
    'min': number;
    /**
    * The input's minlength attribute.
    */
    'minlength': number;
    /**
    * The input's name attribute.
    */
    'name': string;
    /**
    * The input's placeholder text.
    */
    'placeholder': string;
    /**
    * Set to true for a readonly input.
    */
    'readonly': boolean;
    /**
    * Removes focus from the input.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Sets focus on the input.
    */
    'setFocus': () => Promise<void>;
    /**
    * The input's size, one of `small`, `medium`, or `large`.
    */
    'size': string;
    /**
    * The input's step attribute.
    */
    'step': number;
    /**
    * The input's type, one of `text`, `number`, `email`, etc.
    */
    'type': string;
    /**
    * The input's value attribute.
    */
    'value': string;
  }
  interface SRange {
    /**
    * Set to true to disable the input.
    */
    'disabled': boolean;
    /**
    * The input's max attribute.
    */
    'max': number;
    /**
    * The input's min attribute.
    */
    'min': number;
    /**
    * The input's name attribute.
    */
    'name': string;
    /**
    * Removes focus from the input.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Sets focus on the input.
    */
    'setFocus': () => Promise<void>;
    /**
    * The input's step attribute.
    */
    'step': number | 'any';
    /**
    * The input's value attribute.
    */
    'value': string;
  }
  interface SSpinner {
    /**
    * The spinner's size.
    */
    'size': string;
  }
  interface STextarea {
    /**
    * The textarea's autocaptialize attribute.
    */
    'autocapitalize': string;
    /**
    * The textarea's autocomplete attribute.
    */
    'autocomplete': string;
    /**
    * The textarea's autocorrect attribute.
    */
    'autocorrect': string;
    /**
    * The textarea's autofocus attribute.
    */
    'autofocus': boolean;
    /**
    * Set to true to disable the textarea.
    */
    'disabled': boolean;
    /**
    * The textarea's inputmode attribute.
    */
    'inputmode': string;
    /**
    * The textarea's name attribute.
    */
    'name': string;
    /**
    * The textarea's placeholder text.
    */
    'placeholder': string;
    /**
    * Set to true for a readonly textarea.
    */
    'readonly': boolean;
    /**
    * Removes focus fromt the textarea.
    */
    'removeFocus': () => Promise<void>;
    /**
    * Controls how the textarea can be resized.
    */
    'resize': 'none' | 'vertical' | 'auto';
    /**
    * The number of rows to display by default.
    */
    'rows': number;
    /**
    * Sets focus on the textarea.
    */
    'setFocus': () => Promise<void>;
    /**
    * The textarea's size, one of `small`, `medium`, or `large`.
    */
    'size': string;
    /**
    * The textarea's value attribute.
    */
    'value': string;
  }
}

declare global {


  interface HTMLSButtonElement extends Components.SButton, HTMLStencilElement {}
  var HTMLSButtonElement: {
    prototype: HTMLSButtonElement;
    new (): HTMLSButtonElement;
  };

  interface HTMLSDropdownElement extends Components.SDropdown, HTMLStencilElement {}
  var HTMLSDropdownElement: {
    prototype: HTMLSDropdownElement;
    new (): HTMLSDropdownElement;
  };

  interface HTMLSDropdownDividerElement extends Components.SDropdownDivider, HTMLStencilElement {}
  var HTMLSDropdownDividerElement: {
    prototype: HTMLSDropdownDividerElement;
    new (): HTMLSDropdownDividerElement;
  };

  interface HTMLSDropdownItemElement extends Components.SDropdownItem, HTMLStencilElement {}
  var HTMLSDropdownItemElement: {
    prototype: HTMLSDropdownItemElement;
    new (): HTMLSDropdownItemElement;
  };

  interface HTMLSInputElement extends Components.SInput, HTMLStencilElement {}
  var HTMLSInputElement: {
    prototype: HTMLSInputElement;
    new (): HTMLSInputElement;
  };

  interface HTMLSRangeElement extends Components.SRange, HTMLStencilElement {}
  var HTMLSRangeElement: {
    prototype: HTMLSRangeElement;
    new (): HTMLSRangeElement;
  };

  interface HTMLSSpinnerElement extends Components.SSpinner, HTMLStencilElement {}
  var HTMLSSpinnerElement: {
    prototype: HTMLSSpinnerElement;
    new (): HTMLSSpinnerElement;
  };

  interface HTMLSTextareaElement extends Components.STextarea, HTMLStencilElement {}
  var HTMLSTextareaElement: {
    prototype: HTMLSTextareaElement;
    new (): HTMLSTextareaElement;
  };
  interface HTMLElementTagNameMap {
    's-button': HTMLSButtonElement;
    's-dropdown': HTMLSDropdownElement;
    's-dropdown-divider': HTMLSDropdownDividerElement;
    's-dropdown-item': HTMLSDropdownItemElement;
    's-input': HTMLSInputElement;
    's-range': HTMLSRangeElement;
    's-spinner': HTMLSSpinnerElement;
    's-textarea': HTMLSTextareaElement;
  }
}

declare namespace LocalJSX {
  interface SButton {
    /**
    * Set to true to draw a full-width button.
    */
    'block'?: boolean;
    /**
    * Set to true to draw a circle button.
    */
    'circle'?: boolean;
    /**
    * Set to true to disable the button.
    */
    'disabled'?: boolean;
    /**
    * Set to true to draw the button in a loading state.
    */
    'loading'?: boolean;
    /**
    * Set to true to draw an outlined button.
    */
    'outline'?: boolean;
    /**
    * Set to true to draw a rounded button.
    */
    'round'?: boolean;
    /**
    * The button's size, one of `small`, `medium`, or `large`.
    */
    'size'?: string;
    /**
    * The button's type, one of `default`, `primary`, `success`, `info`, `warning`, `danger`, or `text`.
    */
    'type'?: string;
  }
  interface SDropdown {
    /**
    * The preferred placement of the dropdown menu. Note that the actual placement may vary as needed to keep the menu inside of the viewport.
    */
    'placement'?: 'bottom-start' | 'bottom-end' | 'top-start' | 'top-end';
  }
  interface SDropdownDivider {}
  interface SDropdownItem {
    /**
    * Set to true to draw the dropdown item in an active state.
    */
    'active'?: boolean;
    /**
    * Set to true to draw the item in a checked state.
    */
    'checked'?: boolean;
    /**
    * Set to true to draw the dropdown item in a disabled state.
    */
    'disabled'?: boolean;
    'onShoelaceSelect'?: (event: CustomEvent<any>) => void;
  }
  interface SInput {
    /**
    * The input's autocaptialize attribute.
    */
    'autocapitalize'?: string;
    /**
    * The input's autocomplete attribute.
    */
    'autocomplete'?: string;
    /**
    * The input's autocorrect attribute.
    */
    'autocorrect'?: string;
    /**
    * The input's autofocus attribute.
    */
    'autofocus'?: boolean;
    /**
    * Set to true to add a clear button when the input is populated.
    */
    'clearable'?: boolean;
    /**
    * Set to true to disable the input.
    */
    'disabled'?: boolean;
    /**
    * The input's inputmode attribute.
    */
    'inputmode'?: string;
    /**
    * The input's max attribute.
    */
    'max'?: number;
    /**
    * The input's maxlength attribute.
    */
    'maxlength'?: number;
    /**
    * The input's min attribute.
    */
    'min'?: number;
    /**
    * The input's minlength attribute.
    */
    'minlength'?: number;
    /**
    * The input's name attribute.
    */
    'name'?: string;
    /**
    * The input's placeholder text.
    */
    'placeholder'?: string;
    /**
    * Set to true for a readonly input.
    */
    'readonly'?: boolean;
    /**
    * The input's size, one of `small`, `medium`, or `large`.
    */
    'size'?: string;
    /**
    * The input's step attribute.
    */
    'step'?: number;
    /**
    * The input's type, one of `text`, `number`, `email`, etc.
    */
    'type'?: string;
    /**
    * The input's value attribute.
    */
    'value'?: string;
  }
  interface SRange {
    /**
    * Set to true to disable the input.
    */
    'disabled'?: boolean;
    /**
    * The input's max attribute.
    */
    'max'?: number;
    /**
    * The input's min attribute.
    */
    'min'?: number;
    /**
    * The input's name attribute.
    */
    'name'?: string;
    /**
    * The input's step attribute.
    */
    'step'?: number | 'any';
    /**
    * The input's value attribute.
    */
    'value'?: string;
  }
  interface SSpinner {
    /**
    * The spinner's size.
    */
    'size'?: string;
  }
  interface STextarea {
    /**
    * The textarea's autocaptialize attribute.
    */
    'autocapitalize'?: string;
    /**
    * The textarea's autocomplete attribute.
    */
    'autocomplete'?: string;
    /**
    * The textarea's autocorrect attribute.
    */
    'autocorrect'?: string;
    /**
    * The textarea's autofocus attribute.
    */
    'autofocus'?: boolean;
    /**
    * Set to true to disable the textarea.
    */
    'disabled'?: boolean;
    /**
    * The textarea's inputmode attribute.
    */
    'inputmode'?: string;
    /**
    * The textarea's name attribute.
    */
    'name'?: string;
    /**
    * The textarea's placeholder text.
    */
    'placeholder'?: string;
    /**
    * Set to true for a readonly textarea.
    */
    'readonly'?: boolean;
    /**
    * Controls how the textarea can be resized.
    */
    'resize'?: 'none' | 'vertical' | 'auto';
    /**
    * The number of rows to display by default.
    */
    'rows'?: number;
    /**
    * The textarea's size, one of `small`, `medium`, or `large`.
    */
    'size'?: string;
    /**
    * The textarea's value attribute.
    */
    'value'?: string;
  }

  interface IntrinsicElements {
    's-button': SButton;
    's-dropdown': SDropdown;
    's-dropdown-divider': SDropdownDivider;
    's-dropdown-item': SDropdownItem;
    's-input': SInput;
    's-range': SRange;
    's-spinner': SSpinner;
    's-textarea': STextarea;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      's-button': LocalJSX.SButton & JSXBase.HTMLAttributes<HTMLSButtonElement>;
      's-dropdown': LocalJSX.SDropdown & JSXBase.HTMLAttributes<HTMLSDropdownElement>;
      's-dropdown-divider': LocalJSX.SDropdownDivider & JSXBase.HTMLAttributes<HTMLSDropdownDividerElement>;
      's-dropdown-item': LocalJSX.SDropdownItem & JSXBase.HTMLAttributes<HTMLSDropdownItemElement>;
      's-input': LocalJSX.SInput & JSXBase.HTMLAttributes<HTMLSInputElement>;
      's-range': LocalJSX.SRange & JSXBase.HTMLAttributes<HTMLSRangeElement>;
      's-spinner': LocalJSX.SSpinner & JSXBase.HTMLAttributes<HTMLSSpinnerElement>;
      's-textarea': LocalJSX.STextarea & JSXBase.HTMLAttributes<HTMLSTextareaElement>;
    }
  }
}


